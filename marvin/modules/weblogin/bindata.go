// Code generated by go-bindata.
// sources:
// layout.html.tmpl
// assets/styles.css
// templates/factoid-info.html
// templates/factoid-list.html
// templates/home.html
// templates/logs-index.html
// DO NOT EDIT!

package weblogin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _layoutHtmlTmpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x5b\x73\xda\x38\x14\x7e\xcf\xaf\x50\xb5\x7d\xcb\x62\x0d\xd0\xa6\x6c\xc7\x78\x97\x84\xb4\x4d\x43\x2e\x5b\x72\x99\xed\xdb\xc1\x3e\xb6\x05\xb2\x44\x24\x99\xe0\xf5\xf8\xbf\xef\xf8\x06\x84\xd2\x76\xa7\xbc\x58\x3e\xe7\xf3\x77\x6e\x9f\xce\x90\xe7\x24\xc0\x90\x4b\x24\x54\x40\xa6\x52\x4b\x49\x51\x1c\xb9\xaf\xc6\x37\x67\x77\xff\xdc\x9e\x93\xd8\x26\xc2\x3b\x72\xdb\x07\x42\xe0\x1d\x11\x42\x48\x9e\x93\x99\x50\xfe\x82\x50\xcb\xad\x40\x4a\x1c\x52\x14\x6e\x75\xf6\xf2\x9c\x87\xc4\xb9\x2b\xcf\x45\x91\xe7\xdb\x13\x0a\x83\x45\x71\x05\x7a\xc5\x25\x79\xc4\x19\xb9\x90\x16\x75\x08\x3e\xe6\x39\xca\xa0\x28\x5c\xd6\x32\x10\x94\x41\x99\xc9\xcb\x58\x01\x86\x90\x0a\xdb\x31\x36\x13\x68\xca\xa0\x9d\x06\xe3\x0a\x2e\x17\x44\xa3\x18\xd2\xda\x19\x23\x5a\x4a\x62\x8d\xe1\x90\xc6\xd6\x2e\xcd\x7b\xc6\x12\x58\xfb\x81\x74\x66\x4a\x59\x63\x35\x2c\xcb\x17\x5f\x25\x6c\x63\x60\x7d\xa7\xef\x9c\x30\xdf\x98\xad\xcd\x49\xb8\x74\x7c\x63\x68\x15\xa7\xfe\x71\x69\x31\xd2\xdc\x66\x43\x6a\x62\xe8\x0f\xde\x74\xba\x4f\x83\xe4\xee\xf3\xcd\x68\xba\x1e\xcc\xbb\xa3\xf4\x18\xde\x3e\x8e\x1f\xe4\x2d\xef\x89\xc5\x87\xf0\xf9\xf9\x7c\x04\x83\x78\x3c\x0e\xe6\x5f\xc5\x72\x82\xd1\x3a\x9e\x3f\x5c\x9d\x77\xc3\x68\xfe\x78\xfb\x31\x59\xfc\x6b\xde\x51\xe2\x6b\x65\x8c\xd2\x3c\xe2\x72\x48\x41\x2a\x99\x25\x2a\x35\xb4\x6e\xb7\x6b\x7c\xcd\x97\x96\x18\xed\x6f\xcb\xf1\x03\x39\x37\x8e\x2f\x54\x1a\x84\x02\x34\x56\xb5\xc0\x1c\xd6\x4c\xf0\x99\x61\xf3\xa7\x14\x75\xc6\x7a\x4e\xcf\xe9\x37\x2f\x55\x2d\xf3\x9f\x94\x72\x71\xf2\xe1\xed\xcd\xe5\xf9\xd9\xe4\xc1\x5e\xb2\xd3\xc9\xf1\x80\x4f\x27\xe3\xf3\x4f\xea\x79\x3a\x0a\xef\xd5\xbb\x93\xaf\x93\x3f\x8e\x17\x1f\x47\xd1\xdd\x97\x80\x9f\x66\x17\xd7\x97\x9f\xe1\xe9\xee\xf6\x13\xfb\xfb\xe1\x7a\xda\x7d\x18\xcf\xbe\x5f\x8a\xcb\xea\x32\xbc\x9d\x91\xbd\x9c\x50\xa8\xa4\x35\x4e\xa4\x54\x24\x10\x96\xdc\x54\x25\xf9\xc6\xfc\x19\x42\xc2\x45\x36\x1c\x09\x8c\x34\x66\x70\x3c\x05\x69\x8e\xa7\x67\xf4\x9b\x91\x7b\x3f\x97\x03\x03\x63\xd0\x1a\x56\x7b\xaa\xd9\xb6\xa2\xee\x1c\xd6\xdd\x56\x6f\xa5\x8c\x5b\x8c\xcb\xea\xfb\xe0\xce\x54\x90\x79\x47\x5b\xb8\x84\xd5\x0c\x74\x2b\x4f\x57\xc2\x8a\xf8\x02\x8c\x19\x36\x1e\x52\x3f\x3a\x5c\xae\x50\x1b\x6c\x73\x0e\xf8\x06\xe7\x2b\x69\x81\x4b\xd4\x9d\x50\xa4\x3c\x38\x80\x68\x28\xca\x0c\x50\x37\xfe\x0a\x03\x7b\x88\x99\x06\x19\x6c\x4a\xa7\x5e\x7d\xfd\x5c\x06\x0d\x27\x0b\xf8\x6a\x87\x9e\x07\xc3\x4d\xfe\x9b\x64\x84\x80\xa5\xc1\x36\xed\xf6\x7d\x37\x6a\x2a\x76\xc2\xb6\x40\x09\xab\x1d\x4c\x9e\x93\x67\x6e\xe3\xb6\x89\xaf\xfd\x54\x6b\x94\x96\xbc\x1f\x12\xe7\xba\xfa\xe0\xac\xb1\x54\x7e\x0d\x32\xc2\xd6\x73\x61\x31\x31\xed\x5c\x76\x08\x79\x48\xf0\xa9\x04\x25\xb8\x25\xec\xec\xe1\x5c\xc1\xdb\xe4\xc0\xb7\x7c\x85\xd4\x73\xa1\x69\x48\x9e\x3b\xf7\x5f\x26\x45\x41\xbd\x3c\xaf\x68\xca\x25\x04\x9e\xcb\x04\xf7\xf6\x82\x75\x48\xb9\xbf\x0e\xb1\xff\x2a\xdd\x56\x6a\x4d\x39\xb5\xe5\xe5\xf6\xab\x87\x94\x8a\xff\xd1\xec\xf6\xa8\x79\x14\x5b\xba\x1f\xb0\x6c\x96\xd3\xb4\xf8\xde\xa0\x3e\x58\xc9\x0b\x43\x65\xe4\x49\x44\x62\x2c\x19\x87\xb4\xdf\xa3\xe4\x99\x07\x36\xae\x8f\xd5\x36\xca\xf3\x5d\x52\x67\xb4\x02\x0b\x9a\xf4\x7b\x45\x41\xbf\x21\xab\x7e\x46\xfb\x06\xed\x8f\x3e\x24\xdd\xf5\xef\xe4\xb0\xfb\xe4\x4d\x51\x90\xde\x77\xdd\xdd\xde\xa0\x28\xc8\x9b\x35\x25\xec\x40\x29\xed\x94\x7e\xa3\x9e\x11\xe0\x2f\xfe\xda\x23\xd9\x0e\xec\x65\x5f\x7e\x51\x0c\x4c\x41\x6a\x63\x56\x85\x62\xc6\x82\xb6\xd4\x9b\xa8\x88\x5c\xc8\x1f\x6a\xe2\xe0\xdc\x77\xaf\x69\x7d\x74\x99\x84\x55\xb9\x75\x36\x42\x6a\x2f\xd8\xeb\x48\xa8\x19\x88\xea\x62\xd5\x72\x6a\xf6\x52\xb9\x55\x50\x5a\x4a\x9c\x53\x15\x64\x63\xb0\x50\xad\xb1\xb8\xeb\x5d\x71\x63\xb8\x8c\x48\x83\x78\xe5\xb2\xb8\x5b\x6d\xb4\x7d\x45\xba\xac\x5e\x76\x2e\xab\xff\x12\x6c\x3c\xff\x05\x00\x00\xff\xff\x3e\xd8\xcc\xbe\x49\x08\x00\x00"

func layoutHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_layoutHtmlTmpl,
		"layout.html.tmpl",
	)
}

func layoutHtmlTmpl() (*asset, error) {
	bytes, err := layoutHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.html.tmpl", size: 2121, mode: os.FileMode(420), modTime: time.Unix(1481242895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsStylesCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xd1\x6e\xd3\x30\x14\x7d\xef\x57\x5c\x6d\x0f\x93\xba\xa5\x4d\xbb\x6e\x94\x4c\x4c\x1a\x05\x09\x24\xc4\x03\x9b\x78\x41\x3c\xdc\xd8\x37\x89\x35\xc7\x37\xb3\x9d\x75\x05\xed\xdf\x91\x9d\xb4\x2b\xa5\x9d\x78\x8c\x7d\xcf\xb9\xc7\xe7\x9c\x8c\x87\xf0\x89\x50\x92\x85\xe1\x78\x90\xb3\x5c\xc1\xef\x01\x00\x40\x8e\xe2\xbe\xb4\xdc\x1a\x99\x08\xd6\x6c\x33\x38\x2e\xa8\x10\x85\xb8\x1a\x3c\x0f\x46\x06\x1f\x73\xb4\x89\xc1\xc7\x6b\xad\xae\x55\x5d\xfe\xa8\x48\x95\x95\x7f\x77\x74\x3e\x3d\xfa\xd9\x53\xd4\x68\x4b\x65\x12\x1b\x2e\x32\xb8\x68\x9e\xae\xe2\xb1\x54\xae\xd1\xb8\xca\x40\x19\xad\x0c\x25\xb9\x66\x71\xff\x3f\xac\xa7\x80\x3d\xf3\x01\x8a\x70\xd5\xa0\x94\xca\x94\x89\xa6\xc2\x67\x90\x5e\x6d\x2b\xe9\xce\xa2\x90\xe7\xc1\x78\x08\x77\xdc\x00\x17\x20\xd8\x78\x32\x3e\x18\x30\x6a\xb0\xa4\xa4\xea\x0c\xa9\x26\xaf\xaf\x7b\xfe\x7b\xdc\xd5\xa8\x75\x8f\x28\xd8\xf8\xc4\xa9\x5f\x94\xc1\x64\xbe\x7e\xf8\xda\xc7\xf9\x7c\xbe\x47\xd6\x66\x2c\x62\x0b\xac\x95\x5e\x65\x70\x72\xa3\xa9\xb4\xb4\x42\xb8\x45\xe3\xe0\x76\x71\x72\x06\x0e\x8d\x4b\x1c\x59\x55\x04\x0d\xe1\x21\xb7\x24\xbc\x62\x93\xc1\x02\xb5\xe6\xd6\xbb\x40\xf4\x9e\xd9\x3b\x6f\xb1\x81\x0f\x2c\xe2\xc9\x82\x9b\x55\x4c\x03\xa6\xe9\x64\x92\x4c\xd3\xc9\x25\xdc\x2d\x95\xf7\x64\xcf\xe0\xb3\x11\xa3\x30\xf4\x45\x09\x32\x8e\x32\x58\x2c\xe0\xc6\x7b\xab\xf2\x36\x70\xc3\xf9\x28\x0d\x0e\x0d\xc6\xc3\x01\x0c\xb7\x16\xc5\xcf\xaf\xec\xe1\xa1\x55\x9e\x00\x35\x59\xef\xce\x20\x6f\x3d\x88\xd6\x79\xae\x01\x8d\x84\x8a\x74\x53\xb4\x1a\x0c\x7b\x72\x50\xb0\x85\x82\xf5\xbd\x03\x4b\x18\xe2\x02\x5f\x11\x48\x16\x6e\x14\xd8\xbe\xd1\x43\xab\x2c\x39\x40\xc8\xd1\x51\x24\xa8\x59\xaa\x42\x91\x05\xa1\xd1\xc5\xb1\xa8\x05\x16\x5c\xd7\x6c\xc0\xf9\x95\xee\x89\x43\x0a\x7e\xd5\x90\x8b\x81\xe6\x2e\x11\x9d\xd6\x18\x4d\x5f\x8f\x0c\xa6\x69\xe7\x77\x97\x41\xf7\xdd\xd5\x25\x67\x2b\xc9\x66\x30\x69\x9e\xc0\xb1\x56\x12\x8e\x89\xe8\xe5\x26\xe6\x95\x2c\x95\xf4\xd5\xa6\xd5\xfd\x8d\x45\xa9\x5a\x97\xc1\x79\x57\xb1\xed\xe5\xd5\x2c\xee\xef\x23\xf7\xdc\xf4\xe5\xec\x0f\x72\xf6\x9e\xeb\x4d\x39\xb7\x91\x4d\xa6\xd1\xf9\x44\x54\x4a\xcb\x6d\x8e\x35\x24\xdd\x05\x08\x96\x14\x07\xf7\xab\x8a\xcd\x0f\x2d\x20\x03\x6d\x03\xae\x41\x41\x90\x93\x5f\x12\x19\xa8\x5b\xed\x55\xa3\x09\x7a\xb2\x7f\x4c\x3c\x85\x5d\x4b\xb7\x9f\x94\x5c\xbc\xec\xf8\x8e\x56\x61\xa8\xce\x2e\x47\x22\xd1\x94\x64\xb7\x25\x46\x4b\xd7\xff\x87\xa0\xd9\x7c\x36\xdb\x79\xd5\x1a\xd4\xfb\xf8\xfa\xec\x12\xad\x09\xad\x3a\xb4\x01\xf1\xf2\x4d\x3a\x3f\x84\xda\x59\xb1\x7f\x58\x99\x82\x0f\xf2\x4f\xf2\x79\xfa\x96\xf6\x42\x76\xc8\x5f\x26\xc7\x43\xf8\x68\xe4\xe6\xc7\x82\xe1\xf8\x4f\x00\x00\x00\xff\xff\xe4\x31\x71\x04\x9b\x05\x00\x00"

func assetsStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsStylesCss,
		"assets/styles.css",
	)
}

func assetsStylesCss() (*asset, error) {
	bytes, err := assetsStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/styles.css", size: 1435, mode: os.FileMode(420), modTime: time.Unix(1481243193, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFactoidInfoHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x91\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x83\xd9\xeb\xda\xe4\x1a\xb4\x62\x61\x61\xa1\x50\x7a\x68\xd3\x73\x19\xa4\x97\x5a\xd4\x96\x8d\xa4\x24\x84\x41\xff\xbd\x44\x56\x92\xb6\xbe\x78\xf4\xe6\x7b\xe8\xf1\x24\x62\xb1\x77\x1e\xd4\xc6\x74\x1e\x11\xdb\x9c\x1b\x55\x46\xdd\x34\xaa\xaf\x93\x08\xbc\xcd\xb9\xb9\xd3\x66\xf6\x09\x3e\x15\xdc\xba\x23\x99\x91\x63\xfc\x53\x64\x76\x1e\xa1\xbd\x98\x4e\x2e\x0d\xd4\xfd\x67\x93\x66\x67\x7f\x90\x0b\xbf\xe3\xf7\x00\xb6\x85\x25\x22\x52\xc3\x46\x57\x76\x4b\x22\x57\xdf\x13\x4f\xc8\x59\xf5\xc3\x46\x37\xaa\xb7\xee\xa8\x9b\x15\x5f\xf4\xe3\x6c\x3e\x50\x60\xb7\xa7\xee\x21\xae\xe7\x9c\xcf\x88\x22\x18\x23\x72\xf6\x73\xcd\xae\xfa\x45\xdf\x7c\x1c\x13\xc1\xba\xb4\xa5\xbf\x35\xe5\x21\x22\xd0\xaf\x6e\x07\x9e\xa8\xbb\xec\x5f\x23\x42\xce\x22\xdd\x7a\xff\xb5\x01\xaa\x9f\xf3\x24\x62\x06\xf6\x1e\xe3\x9b\xe7\x09\xdf\xcc\xff\xd6\xc5\x17\x9e\x13\x89\x04\x8c\xc9\x4d\x58\x99\x9d\x9b\x10\x13\x4f\x4b\xcd\x56\xc3\x05\x5c\x1b\x8a\xf3\x21\x18\xb4\x5a\x99\xd9\x42\x8b\x74\xcf\x7c\x7a\x29\xda\xc5\x51\x44\xd5\x2f\x01\xb7\x5a\xee\xaf\x54\xfe\x9f\x01\x00\x00\xff\xff\xf6\x34\xd0\xe9\xdb\x01\x00\x00"

func templatesFactoidInfoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFactoidInfoHtml,
		"templates/factoid-info.html",
	)
}

func templatesFactoidInfoHtml() (*asset, error) {
	bytes, err := templatesFactoidInfoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/factoid-info.html", size: 475, mode: os.FileMode(420), modTime: time.Unix(1481245502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFactoidListHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4d\x6f\xdc\x36\x10\xbd\xeb\x57\x4c\x16\x45\xd0\x02\x2b\xa9\xf9\x38\x39\x8c\x90\x20\x40\x01\x03\x4e\x0f\xb5\x8d\xa2\xa7\x78\x56\x1a\x49\xac\xf9\xa1\x92\xd4\xae\x05\x42\xff\xbd\x20\x45\xad\xb5\x75\x72\xe9\x4d\x1a\xce\xcc\x7b\xf3\xe6\x89\xf2\xbe\xa1\x96\x2b\x82\x9d\x75\x93\x20\xbb\x9b\xe7\x8c\xc5\xc7\x2a\x1b\x45\xd1\x62\xed\x34\x6f\x72\xc1\xad\x03\x9f\x01\x00\x0c\xd8\x34\x5c\x75\x57\xf0\xeb\x87\x6c\x7e\x91\x23\x78\x4a\x0b\x6f\x79\x6c\x74\x05\x4a\x2b\xfa\x10\xa3\x12\x4d\xc7\x55\x2e\xa8\x75\x57\xf0\x76\x78\xba\x88\x1a\xde\xf5\x6b\x78\xce\x5e\xf4\x2d\x04\x5a\x97\x4b\xdd\xf0\x96\x53\x93\x60\x5a\xa1\xd1\x5d\x41\x2c\x0d\x55\xac\x4c\xe4\xbd\x27\xd5\xcc\x73\xf6\x3c\x60\xad\x95\x23\xe5\xe2\x84\x0d\x3f\x42\x2d\xd0\xda\x8f\x31\x8c\x5c\x91\xd9\x55\x17\xf1\x01\x3b\xca\x7b\xc2\x26\x9e\x04\x2c\xd6\xbf\xa9\x7e\x5b\x48\x59\x56\xf6\x6f\x2a\x66\x25\x0a\x51\x7d\x86\x13\x4e\xe0\x34\x58\xa7\x0d\x01\xaa\x06\x0c\x39\xc3\xe9\x48\xe0\xe8\xc9\xb1\x72\xc9\xcb\x58\xd9\xf0\xe3\x25\xca\xc1\xe6\x35\x0a\xa1\x47\x07\xcf\x8f\x39\x57\xad\x3e\x83\xbe\xaf\xee\x2d\x57\x1d\x6c\xa0\xdf\xa7\xb3\xa1\xba\xc5\x09\x58\xad\x1b\xaa\x5e\x25\xbd\x14\x4a\x62\x65\x0c\x01\x57\x80\x6a\x82\xba\x47\xa5\x48\xc0\xa9\x27\x43\xf0\x15\xcd\x91\x2b\xe0\x36\x50\x36\xa3\x02\x84\x54\x5a\xc0\x75\x0b\xae\xa7\xf5\x1d\x1c\x3e\x92\x05\x34\xdd\x28\x49\x39\xbb\x5f\x0c\x60\xf4\x91\x37\x14\x12\x25\x60\xeb\xc8\xc4\x9a\x80\xbb\x07\x3b\x60\x4d\xb9\xa5\x01\x0d\x3a\x6a\x0a\xb8\xeb\x69\x25\xb8\xb2\x62\x24\x2b\x39\x5a\xc7\x4a\x92\x15\x1c\x08\xd0\xc5\x0e\x47\x32\x13\x1c\xa8\xe3\x4a\x85\x79\x75\xe4\xb2\x18\x84\xac\xc5\x8e\x42\x37\x6e\x03\x73\x14\x56\x43\x50\x8b\x1a\x40\x38\xa0\xea\xf2\x75\x06\x56\x0e\x67\x75\xfe\xd2\x23\xd4\xa8\x96\xf4\x8b\x51\xe1\x30\x81\xc5\x29\xe0\x2c\xec\x3e\xc9\x45\x96\xf5\xbc\x23\x07\x2f\x15\x2d\xe0\xb3\x85\x03\xb5\xda\xd0\xfe\x2c\xc4\x59\x9f\x08\x8b\x16\x94\x36\x12\xc5\xc2\xe4\xff\xee\xfc\x4f\xc3\xdd\x0f\xb7\x7e\x6f\xa3\xfc\xff\xa1\x6e\x48\x92\x3c\x90\xd9\xf2\x86\xe4\xfa\x55\xfb\x5a\x4b\x19\x0c\x1a\xdc\x4a\x6e\xb3\xfa\xad\x6c\xd7\x2d\x4c\x7a\x04\x45\xd4\x5c\xd8\x21\xf5\x0a\xc5\xe9\xab\x01\x45\x27\xc1\x15\xd9\x3d\x34\x1a\x5c\xcf\xed\xd5\x32\xf5\x60\xa8\xfa\x01\x3b\x7a\x42\x39\x08\x82\xd7\x6f\xb2\x87\x87\x87\xec\xeb\x28\x1c\x0f\x3d\xb2\x2f\x4b\xfb\x10\x4d\x74\x59\x19\xfa\x7c\x8f\x96\x0c\x55\xa1\x8b\x5c\xcb\x61\x40\xe3\xec\x1e\xfe\x1e\xad\x03\x6c\x82\x2f\x5e\xbf\x4d\x8e\x39\x69\xf3\x68\xa1\xd5\x06\x50\x88\x55\x03\x1b\x3e\x8f\xf4\x31\xe4\x70\x18\x1d\x28\xed\x42\x52\xc4\xdb\x7a\xca\xee\xc3\x56\x5d\x4f\x13\xa0\x38\xe1\x64\x61\x4c\x0b\x20\xe5\xb8\xa1\xd5\x9f\xaf\xb6\x1b\xcf\x58\xff\x6e\xbd\x2e\xe0\x86\x07\xbb\xf7\xef\xaa\x8c\x8d\x62\xf5\xc1\xf6\x82\xdb\x85\x1b\x0b\x0c\xaa\x8e\xa0\x08\xd9\x30\xcf\x19\x00\x13\xbc\x62\x08\xbd\xa1\xf6\xe3\xae\x5c\xe9\x94\xde\xf3\x16\xe8\x1f\x28\x6e\x6b\x3d\xd0\x97\xf4\x79\xef\x76\xf3\xfc\xcd\x7b\x12\x96\xe6\xd9\xfb\x8b\xc3\x10\x88\x17\x62\xe9\x7d\x91\x58\xfd\x8e\x92\xe6\x39\x79\x0e\x92\x99\xbc\x87\xed\x39\xcc\x73\xda\x45\xc4\x54\xf4\x1d\x4c\x66\x07\x54\xeb\x50\xdc\xe6\xe9\xba\xc9\xb5\x12\xd3\xae\x7a\x41\x84\x95\x21\xbf\x4a\x7c\x58\x89\x2b\x81\x88\x50\x5c\xdb\x1b\x5d\x3f\x52\x33\xcf\x3f\x8b\xf8\xf0\xcb\x7a\x95\x27\x9a\x5b\xb4\x8b\x5f\xc2\xae\x0a\xaf\x70\xfe\x43\x1c\x26\xf8\xe4\xfd\x89\xbb\x3e\xec\xcb\xc0\x4f\xc5\x1d\xa1\x84\xe2\x06\xad\xbb\xb7\x64\xa2\x48\x8b\x08\x97\x10\x10\x9c\xe1\x7d\x9a\xe3\x5b\xfc\x8e\xb6\xc5\xe7\x51\xc0\x7b\x43\xc2\x71\x49\xcb\xc1\x1d\x97\x64\x1d\xca\xe1\x3c\xe5\x4a\x7a\x30\xb4\x72\xb6\x7a\x34\x35\xed\xaa\x55\xef\xe2\x0f\x3c\xdd\xc6\xd8\x59\xeb\xb3\xef\x59\x29\x78\x74\x06\xa9\x26\x38\x82\x95\xe3\xf3\x7f\x24\x91\xfe\x37\x00\x00\xff\xff\x43\xa3\x15\x02\xc3\x07\x00\x00"

func templatesFactoidListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFactoidListHtml,
		"templates/factoid-list.html",
	)
}

func templatesFactoidListHtml() (*asset, error) {
	bytes, err := templatesFactoidListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/factoid-list.html", size: 1987, mode: os.FileMode(420), modTime: time.Unix(1481245557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHomeHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x5f\x6b\xdb\x30\x10\x7f\xef\xa7\x38\xfc\x9c\x45\x4b\x1f\x87\x2b\x28\x83\xb1\xc2\x0c\x85\x95\xbd\x96\x8b\x7c\xb6\x6e\x91\x25\x23\x9d\x9d\x65\x21\xdf\x7d\xc8\x76\x92\xb6\x23\x6f\xe2\xfe\xfc\xfe\xdc\x9d\x8e\xc7\x9a\x1a\xf6\x04\x85\x09\x5e\xc8\x4b\x71\x3a\xdd\x95\x35\x8f\x60\x1c\xa6\xf4\x30\x85\x91\x3d\xc5\x42\xdf\x01\x00\xbc\xcd\xf5\xd8\xd2\x27\x4b\x58\x5f\xb2\x53\x85\xdd\xe8\xef\xa1\xa3\x52\xd9\x8d\x2e\x53\x87\xce\x69\x4e\xb0\xb7\x14\x09\xc4\x12\x58\xc2\x28\xc0\xa9\x54\x73\x72\xc6\x55\x35\x8f\xfa\x6e\x7e\xf7\xfa\xc5\x72\x02\x4e\x53\xfd\x9e\xb6\xc0\x5e\x28\x36\x68\x08\x9a\x10\xa1\xc2\x38\xb2\x5f\x97\xaa\x5f\x9a\xed\xbd\x2e\x11\x6c\xa4\xe6\xa1\x50\x0d\x1a\x09\x5c\xa7\x42\x7f\x5b\x5e\xa5\x42\x5d\x2a\x7b\xaf\xcf\xf0\xbf\x98\xf6\x90\xc2\x10\x0d\xad\xc0\x72\x92\x10\x0f\x2b\x40\x5f\x03\x0e\x35\x0b\xb8\xd0\xa6\x89\xe9\x8c\x75\x8b\x2b\x17\x16\xfa\x47\x68\x6f\x70\x04\x57\xcf\x60\xa1\x99\xbc\xfc\x74\x68\x76\x60\x2c\x7a\x4f\x2e\x41\x8f\x49\xa6\xf8\xe6\xf3\x0e\x3a\x4a\x09\x5b\x02\xc7\x1d\xcb\xba\xdc\xc6\xeb\x4c\x5f\x02\x8c\x19\xae\x8f\x3c\xa2\xd0\x05\x60\x05\x87\x30\x40\x37\x24\x81\x2d\xc1\x55\x56\xc0\x41\xac\x4a\x99\x4c\x25\xc1\x28\x85\x4e\xdc\x7a\xaa\x81\x3d\xec\x59\xec\x2c\x24\x6b\xbe\xe5\x8c\xfd\xc8\x42\xa9\xd0\xcf\x0b\xe7\xd7\x99\x13\x9e\x72\x02\x85\x83\xff\xdf\x73\x85\x3e\x3b\x98\xf7\x03\x0b\x04\x48\xc8\x32\xe3\x47\xf5\x2b\x08\x11\x04\x77\x04\x08\xfd\xb0\x75\x6c\xdc\x01\x70\x44\x76\xb8\x75\xb4\x74\xe7\x66\xfc\xd8\xf9\x5e\x73\x15\xe2\x54\x66\xe6\xa3\x3b\xab\x19\xdc\x9b\x9b\x74\x9c\x97\x74\x71\xff\xe4\x25\x62\xee\x69\x49\x96\x9d\x3c\x57\xd3\x8d\xfa\x69\xa2\x16\xc7\xac\xca\x84\x18\xc9\x64\xab\xa5\x72\xfc\x1e\xee\x32\x29\x2b\xd2\x7f\x51\x6a\xcf\x3b\x5e\x93\x23\x23\x21\x62\x87\x6b\x13\xba\x29\xa6\x2a\xfc\xc3\x1d\xff\xa5\xd7\xc7\xa6\xe1\xd8\x51\xfd\x5a\xe1\xef\x10\x59\x38\x4f\xb7\x7a\xac\xf2\x14\xa1\x0f\xce\xb1\x6f\xaf\x3c\xa5\xca\x06\x96\x6f\x71\x3c\x92\xaf\x4f\xa7\x7f\x01\x00\x00\xff\xff\xc1\x37\x10\x56\xae\x03\x00\x00"

func templatesHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHomeHtml,
		"templates/home.html",
	)
}

func templatesHomeHtml() (*asset, error) {
	bytes, err := templatesHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/home.html", size: 942, mode: os.FileMode(420), modTime: time.Unix(1481244512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLogsIndexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\x1c\x14\xbd\x54\x92\xed\x04\x29\xa0\x28\x44\xd1\xf6\xd0\x02\x4d\x11\xa0\x45\x81\x1e\x47\xe2\x48\xe2\x86\x22\x05\x92\x92\x63\x10\xfa\xef\x0b\xea\x23\x71\xbc\x5e\x64\x93\xdd\xb5\x2f\xf2\x0c\xe7\xbd\x99\x37\x4f\xb4\xf7\x9c\x4a\xa1\x08\xd6\xd6\x1d\x24\xd9\xf5\x30\xac\xb2\xf1\x91\xad\xe2\xa2\x46\xa5\x48\x46\xb9\x7e\x8c\x0a\xad\x1c\x0a\x45\x06\xfc\x0a\x00\x80\x0b\xdb\x4a\x3c\xa4\x50\x4a\x7a\xbc\x19\x43\xe1\x29\x2a\xa5\xde\xa7\x60\xf4\x1e\xf6\x06\xdb\x29\xf1\xa1\xb3\x4e\x94\x87\x11\x83\x94\x9b\x6a\x22\xeb\xd0\xb8\x9b\xd5\xf0\x39\x1e\x06\x5c\xf4\x33\x5b\x83\xa6\x12\x2a\x85\xcb\x76\xe6\x9a\x02\x91\x11\x55\xed\x52\xd8\x6e\x42\xfc\x15\xa4\x63\xbc\x1c\x8b\x87\xca\xe8\x4e\xf1\xa8\xd0\x52\x9b\x14\x2e\xca\x4d\xf8\x4e\xe8\xb9\x36\x9c\x4c\x64\x90\x8b\xce\xa6\x70\xbd\xb0\xb6\xc8\xb9\x50\x55\x0a\x9b\x78\xdb\x3e\x4e\xf1\x57\x58\xf1\x54\xaf\x5c\xea\xe2\x61\x82\xdb\x0b\xee\xea\xd0\xfd\xe6\x87\x29\xb0\xf4\x72\xbd\xbb\xbc\xcc\x7f\x7e\xef\xa4\xb1\xd2\x51\x83\xa6\x17\x6a\xe6\xd6\x2d\x16\xc2\x1d\x42\xdb\xd7\x2f\x89\x76\xbb\xdd\x1b\xd0\x96\x59\xde\x59\x9d\xf6\xc2\x0a\x47\xfc\x3c\x4a\x96\xcc\xb6\xf3\x9e\x14\x1f\x86\xd5\xb3\x35\x67\xdf\x8c\xde\x0c\x9a\x16\x12\xad\xbd\x5d\x3f\x51\xad\xd9\x08\x78\x9c\x6b\xb1\xa2\xa8\x26\xe4\x21\x9b\xd5\x5b\xf6\xdb\xd4\x23\xfc\xa5\x2b\x9b\x25\xf5\x96\x65\xb6\x41\x29\xd9\xaf\x54\x60\x67\x09\xfe\x91\x58\x3c\x40\x6b\xa8\x11\x5d\x03\xc2\x42\x2e\xa4\x24\x0e\x2d\x19\xe8\x2c\x99\x2c\x99\xce\x67\x09\x17\x3d\x5b\x4d\x84\xf5\x8e\xdd\x77\xb9\x14\x05\xcc\xf0\x01\x7a\xf7\x69\x37\x67\x05\x9a\xbb\x0e\x1f\xef\x0d\xaa\x8a\x20\x5e\x60\x86\xe1\x29\x37\xe2\x8c\xd2\xdc\xae\x47\x5b\xa6\x10\x79\x2f\x49\x41\x7c\x47\x4d\x4e\xc6\x0e\xc3\x11\xd4\x52\x72\x12\xa9\xaf\x58\x86\x50\x1b\x2a\x6f\xd7\x89\xd4\x95\x4d\xbc\x8f\xff\xfc\x3d\x94\x5e\x78\x1f\xff\x8d\x0d\x0d\x43\x96\x20\xcb\x92\xfa\xea\xa4\xb6\x65\xde\xc7\xf7\x9d\x69\xb5\xa5\xf8\x3f\x94\xdd\x78\xb4\x3d\x39\x95\xbc\x20\x3d\xf9\xb9\xec\xf4\x24\xe5\x3d\x88\x12\xe2\xff\x75\x67\xee\x8d\xe8\xd1\xd1\x22\x00\x44\xcb\xe9\xa0\xf1\x94\xfb\x6a\x91\x23\x98\x65\x3e\x47\xf8\x56\xc9\x17\x5a\xef\x45\x09\x4a\x3b\x88\xff\x40\x7b\x37\x5a\x7d\x18\x8e\xde\xc0\x69\xf2\xef\xba\xa1\xb3\x2d\x64\x2d\xcb\xa8\x61\xc1\xef\x80\x86\xc6\x3c\xf6\x28\x24\xe6\x92\xa0\xd4\x06\x5c\x2d\x2c\xcc\xaa\x41\x3e\xbf\x07\xc2\x01\xd7\x64\xd5\x8f\x0e\x6a\xec\x09\x7e\x99\xe6\x88\xb3\x84\x1a\x16\xb6\x7e\xbc\xca\x6f\x6b\x11\x20\xc5\x9f\xf7\xfe\xc2\x25\x24\x2d\xc1\x97\x39\xa2\x65\xff\x6a\xe8\x05\xed\xc1\xd5\x04\x41\xc8\x71\xd8\x76\xae\x98\xe7\xb5\x3f\xc1\xb3\xda\x1a\x3b\x57\x27\x36\xdc\x00\xc9\xf8\xaf\xb4\x66\x56\x54\x0a\x84\x0a\x7a\xc7\x4f\x83\x04\x07\x85\x1e\xc3\x3d\x34\xb5\x37\x8b\xf1\x31\x00\x00\xff\xff\xd3\xee\x6a\x11\x46\x07\x00\x00"

func templatesLogsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogsIndexHtml,
		"templates/logs-index.html",
	)
}

func templatesLogsIndexHtml() (*asset, error) {
	bytes, err := templatesLogsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logs-index.html", size: 1862, mode: os.FileMode(420), modTime: time.Unix(1481244453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"layout.html.tmpl":            layoutHtmlTmpl,
	"assets/styles.css":           assetsStylesCss,
	"templates/factoid-info.html": templatesFactoidInfoHtml,
	"templates/factoid-list.html": templatesFactoidListHtml,
	"templates/home.html":         templatesHomeHtml,
	"templates/logs-index.html":   templatesLogsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"styles.css": &bintree{assetsStylesCss, map[string]*bintree{}},
	}},
	"layout.html.tmpl": &bintree{layoutHtmlTmpl, map[string]*bintree{}},
	"templates": &bintree{nil, map[string]*bintree{
		"factoid-info.html": &bintree{templatesFactoidInfoHtml, map[string]*bintree{}},
		"factoid-list.html": &bintree{templatesFactoidListHtml, map[string]*bintree{}},
		"home.html":         &bintree{templatesHomeHtml, map[string]*bintree{}},
		"logs-index.html":   &bintree{templatesLogsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
