// Code generated by go-bindata.
// sources:
// rss.xml
// DO NOT EDIT!

package rss_data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _rssXml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x41\x6e\xf3\x20\x10\x85\xf7\x3e\x05\x62\x1f\x3b\xff\xbf\xea\x82\x10\xa9\x8d\x22\x55\xf2\xaa\x72\x0e\x40\xcc\x28\x45\x21\x38\x62\xc6\x55\x25\xc4\xdd\x2b\x70\x8c\xeb\xaa\x52\x57\x30\x6f\xbe\x81\xc7\x43\xec\x3f\x6f\x96\x7d\x80\x47\x33\xb8\x1d\xff\x57\x6f\x39\x03\xd7\x0f\xda\xb8\xcb\x8e\x9f\xba\xe3\xe6\x89\xb3\xbd\xac\x84\x47\x5c\xb0\xff\xf5\x96\xcb\x4a\xf4\xef\xca\x39\xb0\xb2\x62\x8c\x31\x41\x86\x2c\xc8\x10\xea\x23\x80\xee\x52\x11\xa3\x68\x26\x75\x22\x34\x60\xef\xcd\x9d\xcc\xe0\x66\xee\xb0\x48\x89\xfe\x4e\x4c\x33\xd6\xb8\xeb\x0c\xb7\xc6\x5d\x13\x95\xb5\x47\x5b\x21\x3d\x8f\xc6\xea\x83\xa2\x72\x79\xab\x90\x4e\x77\xad\x08\x74\xc6\x57\xcc\xc3\x2c\xd9\x44\x77\x5d\x9b\x4d\x92\x95\x55\x6e\x84\xe0\x95\xbb\x00\xab\x5f\x09\x6e\x18\x63\x08\x67\x3b\xf4\x57\xc6\x3d\xe2\xc6\x10\xdc\x38\xab\x63\xcc\x68\x3e\x27\x49\xb2\x94\xeb\x1c\x7e\xcb\xa0\x50\x3f\xb2\xf8\x2b\x87\x32\x37\xe7\x71\x7a\x6b\xd7\x51\x14\xe2\x3e\x9e\xe7\x30\x5e\x46\xa4\xb4\x4f\xe4\x2c\x2f\xde\x9b\xc5\x7c\x08\xe0\x74\x7a\x6d\x5e\x2a\xd1\x94\xaf\x15\x8d\x47\x94\x5f\x01\x00\x00\xff\xff\x07\xc0\xcd\x71\x27\x02\x00\x00"

func rssXmlBytes() ([]byte, error) {
	return bindataRead(
		_rssXml,
		"rss.xml",
	)
}

func rssXml() (*asset, error) {
	bytes, err := rssXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rss.xml", size: 551, mode: os.FileMode(420), modTime: time.Unix(1480712864, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"rss.xml": rssXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"rss.xml": &bintree{rssXml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
